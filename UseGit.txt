1.通过git init命令把一个目录变成Git可以管理的仓库

2.用命令git add告诉Git，把文件添加到仓库git add readme.txt，用命令git commit告诉Git，把文件提交到仓库git commit -m "wrote a readme file"

3.git status命令看看结果

4.git diff查看文件的修改情况。git diff readme.txt 

5.git log命令显示从最近到最远的提交日志。加上--pretty=oneline参数可以查看概要信息。

6.HEAD表示当前版本。上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。git reset --hard HEAD^表示回退到上一个版本号。git reset --hard 3628164表示回退到3628164版本号，版本号没必要写全，前几位就可以。

7.git reflog用来记录你的每一次命令。

8.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。

9.命令git rm用于删除一个文件。

10.创建SSH Key，ssh-keygen -t rsa -C "youremail@example.com"。登陆GitHub，打开“Account settings”，在Key文本框里粘贴id_rsa.pub文件的内容。

11.git remote add origin git@github.com:***username***/***workstation***.git,远程库的名字就是origin，这是Git默认的叫法，也可以改成别的。git push -u origin master，把当前分支master推送到远程，第一次关联后以后不用加-u参数。
第一次使用git push -u origin master提交时出现failed to push some refs to git错误时，使用git pull --rebase origin master先将远程的同步到本地再提交。

12.git clone git@github.com:michaelliao/gitskills.git，把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了。

13.git checkout -b dev，git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：git branch dev，git checkout dev。

14.git branch命令会列出所有分支，当前分支前面会标一个*号。

15.git checkout master，切换到master分支，git merge dev，把dev分支的工作成果合并到master分支上。git merge命令用于合并指定分支到当前分支。git branch -d dev，删除dev分支。

16.git merge --no-ff -m "merge with no-ff" dev,--no-ff参数，表示禁用Fast forward，合并后的历史有分支，能看出来曾经做过合并。git log --graph --pretty=oneline --abbrev-commit看分支历史。

17.git stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。git stash list命令查看工作现场列表。一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用git stash pop，恢复的同时把stash内容也删了。git stash apply stash@{0}恢复制定stash。

18.如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

19.git clone默认只clone远程库中的master分支。git checkout -b dev origin/dev创建远程origin的dev分支到本地。git branch --set-upstream dev origin/dev设置dev和origin/dev的链接。
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

20.git tag <name>就可以打一个新标签,git tag查看所有标签。git tag v0.9 6224937对commit id是6224937打上标签。git show <tagname>查看标签信息。git tag -a v0.1 -m "version 0.1 released" 3628164，-a指定标签名，-m指定说明文字。-s用私钥签名一个标签git tag -s v0.2 -m "signed version 0.2 released" fec145a。

21.git tag -d v0.1删除v0.1标签。git push origin v1.0推送v1.0标签到远程。git push origin --tags一次性推送全部尚未推送到远程的本地标签。git tag -d v0.9可以删除一个本地标签，git push origin :refs/tags/<tagname>可以删除一个远程标签。
